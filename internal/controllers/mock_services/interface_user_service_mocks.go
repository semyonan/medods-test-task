// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/users_service.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	DAO "medods-test-task/internal/DAO"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockUsersServiceInterface is a mock of UsersServiceInterface interface.
type MockUsersServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUsersServiceInterfaceMockRecorder
}

// MockUsersServiceInterfaceMockRecorder is the mock recorder for MockUsersServiceInterface.
type MockUsersServiceInterfaceMockRecorder struct {
	mock *MockUsersServiceInterface
}

// NewMockUsersServiceInterface creates a new mock instance.
func NewMockUsersServiceInterface(ctrl *gomock.Controller) *MockUsersServiceInterface {
	mock := &MockUsersServiceInterface{ctrl: ctrl}
	mock.recorder = &MockUsersServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersServiceInterface) EXPECT() *MockUsersServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateSession mocks base method.
func (m *MockUsersServiceInterface) CreateSession(ctx context.Context, userId primitive.ObjectID) (DAO.Tokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, userId)
	ret0, _ := ret[0].(DAO.Tokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockUsersServiceInterfaceMockRecorder) CreateSession(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockUsersServiceInterface)(nil).CreateSession), ctx, userId)
}

// IdSignIn mocks base method.
func (m *MockUsersServiceInterface) IdSignIn(ctx context.Context, id string) (DAO.Tokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IdSignIn", ctx, id)
	ret0, _ := ret[0].(DAO.Tokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IdSignIn indicates an expected call of IdSignIn.
func (mr *MockUsersServiceInterfaceMockRecorder) IdSignIn(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IdSignIn", reflect.TypeOf((*MockUsersServiceInterface)(nil).IdSignIn), ctx, id)
}

// RefreshTokens mocks base method.
func (m *MockUsersServiceInterface) RefreshTokens(ctx context.Context, refreshToken string) (DAO.Tokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshTokens", ctx, refreshToken)
	ret0, _ := ret[0].(DAO.Tokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshTokens indicates an expected call of RefreshTokens.
func (mr *MockUsersServiceInterfaceMockRecorder) RefreshTokens(ctx, refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshTokens", reflect.TypeOf((*MockUsersServiceInterface)(nil).RefreshTokens), ctx, refreshToken)
}

// SignIn mocks base method.
func (m *MockUsersServiceInterface) SignIn(ctx context.Context, request DAO.SignInRequest) (DAO.Tokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", ctx, request)
	ret0, _ := ret[0].(DAO.Tokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockUsersServiceInterfaceMockRecorder) SignIn(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockUsersServiceInterface)(nil).SignIn), ctx, request)
}

// SignUp mocks base method.
func (m *MockUsersServiceInterface) SignUp(ctx context.Context, request DAO.SignUpRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignUp indicates an expected call of SignUp.
func (mr *MockUsersServiceInterfaceMockRecorder) SignUp(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockUsersServiceInterface)(nil).SignUp), ctx, request)
}
